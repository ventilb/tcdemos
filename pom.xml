<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2012 Manuel Schulze <manuel_schulze@i-entwicklung.de>
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>de.iew</groupId>
    <artifactId>tcdemos</artifactId>
    <packaging>war</packaging>
    <version>0.1</version>
    <name>i-entwicklung Tomcat Demos</name>
    <url>https://www.i-entwicklung.de/tcdemos</url>
    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.10</version>
            <scope>test</scope>
        </dependency>
        <!--
        Abhängigkeiten für Logging
        -->
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>1.1.1</version>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.17</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.6.2</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.6.2</version>
        </dependency>
        <!--
        Abhängigkeiten für Spring

        Lizenz: Apache 2.0 laut Maven Repository
        -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>3.1.2.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>3.1.2.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>3.1.2.RELEASE</version>
        </dependency>
        <dependency>
            <!-- Damit wir Spring Beans in JUnit Tests verwenden können -->
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>3.1.2.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-core</artifactId>
            <version>3.1.2.RELEASE</version>
        </dependency>
        <dependency>
            <!-- Damit wir den security: namespace in den XML-Dateien haben -->
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>3.1.2.RELEASE</version>
        </dependency>
        <dependency>
            <!-- Für unsere DomainModel ACLs -->
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-acl</artifactId>
            <version>3.1.2.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-taglibs</artifactId>
            <version>3.1.2.RELEASE</version>
        </dependency>
        <dependency>
            <!-- Zum Schützen der Webseiten und Webservices -->
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <version>3.1.2.RELEASE</version>
        </dependency>
        <!--
        Spring Integration Unterstützung
        -->
        <dependency>
        	<groupId>org.springframework.integration</groupId>
        	<artifactId>spring-integration-core</artifactId>
        	<version>2.2.1.RELEASE</version>
        </dependency>
        <dependency>
        	<groupId>org.springframework.integration</groupId>
        	<artifactId>spring-integration-event</artifactId>
        	<version>2.2.1.RELEASE</version>
        </dependency>
        <!--
        Für die Jabber Unterstützung.

        Verwendet Smack. Für Lizenzdetails siehe:
        Lizenz: Apache 2.0
        See: http://www.igniterealtime.org/builds/smack/docs/latest/README.html
        -->
        <dependency>
        	<groupId>org.springframework.integration</groupId>
        	<artifactId>spring-integration-xmpp</artifactId>
        	<version>2.2.1.RELEASE</version>
        </dependency>
        <!--
        Benötigen wir für AOP Funktionen

        Lizenz: Eclipse Public License - v 1.0 (http://www.eclipse.org/legal/epl-v10.html)
        -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.7.0</version>
        </dependency>

        <!--
        Benötigen wir aktuell für die Integrationstests.

        Lizenz: Apache Lizenz 2.0 laut LICENSE file im JAR
        -->
        <dependency>
            <groupId>cglib</groupId>
            <artifactId>cglib</artifactId>
            <version>2.2.2</version>
        </dependency>

        <!--
        Abhängigkeiten für das Schreiben von JSPs
        -->
        <dependency>
            <groupId>jstl</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>
        <dependency>
            <groupId>taglibs</groupId>
            <artifactId>standard</artifactId>
            <version>1.1.2</version>
        </dependency>
        <!--
        Jackson wird benötigt um mit Spring 3 JSON in Spring-Controller
        verarbeiten und produzieren zu können.

        * net.sf.json wurde in Spring 2 verwendet
        -->
        <dependency>
            <groupId>org.codehaus.jackson</groupId>
            <artifactId>jackson-jaxrs</artifactId>
            <version>1.9.9</version>
        </dependency>
        <dependency>
            <groupId>org.codehaus.jackson</groupId>
            <artifactId>jackson-mapper-asl</artifactId>
            <version>1.9.9</version>
        </dependency>
        <!--
        Wir benötigen jsp-api und servlet-api um in JSP-Seiten auf den
        pageContext zugreifen zu können.

        Wichtig ist der provided-Scope, da diese Bibliotheken beim
        Deployen in den Tomcat nicht im Projekt vorhanden sein dürfen.
        Tomcat stellt sie selbst bereit. Das wurde in der
        Servlet-Spezifikation so festgelegt.

        see http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html
        -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jsp-api</artifactId>
            <version>2.0</version>
            <scope>provided</scope>
        </dependency>

        <!--
        Hibernate Datenbankzugriff.

        Lizenz: LGPL v2.1 http://www.hibernate.org/license
        -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-c3p0</artifactId>
            <version>4.1.7.Final</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>4.1.7.Final</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-ehcache</artifactId>
            <version>4.1.7.Final</version>
        </dependency>
        <!--
        MySQL Treiber für Datenbank.

        Lizenz: GPL v2.0 with FOSS Exception granted by Oracle

        see http://dev.mysql.com/downloads/connector/j/
        see http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
        see http://www.mysql.com/about/legal/licensing/foss-exception/
        see http://www.mysql.com/about/legal/licensing/oem/#5
        -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.21</version>
        </dependency>
        <!--
        Liquibase für einfache Datenbank-Überarbeitungen.

        Lizenz: Apache 2.0 laut Webseite http://www.liquibase.org/
        -->
        <dependency>
            <groupId>org.liquibase</groupId>
            <artifactId>liquibase-core</artifactId>
            <version>2.0.5</version>
        </dependency>
        <!--
        Bibliotheken aus dem Jakarta-Commons Repository.

        Lizenz: Apache 2.0 (http://commons.apache.org/beanutils/license.html)
        -->
        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>1.8.3</version>
        </dependency>
        <dependency>
        	<groupId>commons-lang</groupId>
        	<artifactId>commons-lang</artifactId>
        	<version>2.6</version>
        </dependency>
        <dependency>
        	<groupId>commons-collections</groupId>
        	<artifactId>commons-collections</artifactId>
        	<version>3.2.1</version>
        </dependency>
        <!--
        Für Formular Validierung. API und Implementierung von JSR-303

        Lizenz: Open Source laut JSR-303 Webseite
        -->
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>1.0.0.GA</version>
        </dependency>
        <!--
        Lizenz: Apache 2.0 (http://www.hibernate.org/subprojects/validator.html)
        -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>4.3.0.Final</version>
        </dependency>
    </dependencies>
    <build>
        <!--
        see http://www.manydesigns.com/en/portofino/portofino3/tutorials/using-maven-profiles-and-resource-filtering
        see http://www.petrikainulainen.net/programming/tips-and-tricks/creating-profile-specific-configuration-files-with-maven/
        -->
        <finalName>tcdemos</finalName>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                    <docencoding>UTF-8</docencoding>
                </configuration>
            </plugin>
            <!--
            Das Resources Plugin ist in der Lage über konfigurierbare Ressourcen
            zu iterieren und bspw. Ersetzungen in den Dateien durchzuführen.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.5</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
        </plugins>
        <resources>
            <!--
            Hiermit sagen wir Maven, dass es das angegebene Verzeichnis filtern
            und die Properties aus dem Build-Profil ersetzen soll. Zum Beispiel
            wird dadurch die Datenbank konfiguriert.
            -->
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
            <!--
            Mit der folgenden Ressourcen können wir abhängig vom eingestellten
            Build-Profil eine log4j.xml Konfiguration für das Projekt festlegen.

            see http://maven.apache.org/plugins/maven-resources-plugin/examples/include-exclude.html
            -->
            <resource>
                <directory>profiles/${build.profile.id}</directory>
                <includes>
                    <include>log4j.xml</include>
                </includes>
            </resource>
        </resources>
        <filters>
            <filter>profiles/${build.profile.id}/config.properties</filter>
        </filters>
    </build>
    <profiles>
        <profile>
            <id>development</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <build.profile.id>development</build.profile.id>
            </properties>
        </profile>
        <profile>
            <id>production</id>
            <properties>
                <build.profile.id>production</build.profile.id>
            </properties>
        </profile>
    </profiles>
</project>
