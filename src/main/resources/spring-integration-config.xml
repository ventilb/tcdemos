<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2012-2013 Manuel Schulze <manuel_schulze@i-entwicklung.de>
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int-event="http://www.springframework.org/schema/integration/event"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
 http://www.springframework.org/schema/integration/event
 http://www.springframework.org/schema/integration/event/spring-integration-event.xsd
 http://www.springframework.org/schema/task
 http://www.springframework.org/schema/task/spring-task.xsd
 http://www.springframework.org/schema/integration
 http://www.springframework.org/schema/integration/spring-integration.xsd
 http://www.springframework.org/schema/util
 http://www.springframework.org/schema/util/spring-util.xsd">

    <!--
    | Spring integration based application event handling
    |
    | We define an outgoing channel for the application. The application events are routed into the
    | synchronousApplicationEventChannel channel if the event is marked as synchronous. The application events are
    | routed into the asynchronousApplicationEventChannel channel if the event is marked as asynchronous.
    -->
    <int:channel id="applicationEventChannel"/>
    <int-event:outbound-channel-adapter channel="applicationEventChannel"/>

    <int-event:inbound-channel-adapter channel="applicationEventDispatcherChannel"
                                       event-types="de.iew.framework.utils.IewApplicationEvent"/>
    <int:channel id="applicationEventDispatcherChannel"/>

    <int:router input-channel="applicationEventDispatcherChannel" expression="payload.synchronous">
        <int:mapping value="true" channel="synchronousApplicationEventChannel"/>
        <int:mapping value="false" channel="jdbcApplicationEventOutgoingChannel"/>
    </int:router>

    <!--
    | Setup jdbc based polling message channel
    -->
    <bean id="messageStoreQueryProvider"
          class="org.springframework.integration.jdbc.store.channel.MySqlChannelMessageStoreQueryProvider"/>

    <int:transaction-synchronization-factory id="messageStoreSyncFactory">
        <int:after-commit expression="@messageStore.removeFromIdCache(headers.id.toString())"/>
        <int:after-rollback expression="@messageStore.removeFromIdCache(headers.id.toString())"/>
    </int:transaction-synchronization-factory>

    <task:executor id="messageStoreThreadPool" pool-size="10"
                   queue-capacity="10" rejection-policy="CALLER_RUNS"/>

    <bean id="messageStore" class="org.springframework.integration.jdbc.store.JdbcChannelMessageStore">
        <property name="dataSource" ref="dataSource"/>
        <property name="channelMessageStoreQueryProvider" ref="messageStoreQueryProvider"/>
        <property name="region" value="TX_TIMEOUT"/>
        <property name="usingIdCache" value="true"/>
        <property name="tablePrefix" value="msg_"/>
    </bean>

    <int:channel id="jdbcApplicationEventOutgoingChannel">
        <int:queue message-store="messageStore"/>
    </int:channel>

    <int:bridge input-channel="jdbcApplicationEventOutgoingChannel"
                output-channel="asynchronousApplicationEventChannel">
        <int:poller fixed-delay="500" receive-timeout="500"
                    max-messages-per-poll="1" task-executor="messageStoreThreadPool">
            <int:transactional propagation="REQUIRED" synchronization-factory="messageStoreSyncFactory"
                               isolation="READ_COMMITTED" transaction-manager="txManager"/>
        </int:poller>
    </int:bridge>

    <!--
    | Channel to receive (a)synchronous application event messages
    |
    | Use these channels if you want to listen for application events.
    -->
    <int:publish-subscribe-channel id="synchronousApplicationEventChannel"/>
    <int:publish-subscribe-channel id="asynchronousApplicationEventChannel"/>

    <bean id="nullMessageSubscriber" class="de.iew.framework.spring.integration.NullMessageSubscriber">
        <property name="messageChannels">
            <util:list>
                <ref bean="synchronousApplicationEventChannel"/>
                <ref bean="asynchronousApplicationEventChannel"/>
            </util:list>
        </property>
    </bean>
</beans>