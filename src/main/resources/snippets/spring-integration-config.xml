<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2012-2013 Manuel Schulze <manuel_schulze@i-entwicklung.de>
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int-event="http://www.springframework.org/schema/integration/event"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:int-jdbc="http://www.springframework.org/schema/integration/jdbc"
       xmlns:int-jmx="http://www.springframework.org/schema/integration/jmx"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
 http://www.springframework.org/schema/integration/event
 http://www.springframework.org/schema/integration/event/spring-integration-event.xsd
 http://www.springframework.org/schema/task
 http://www.springframework.org/schema/task/spring-task.xsd
 http://www.springframework.org/schema/integration
 http://www.springframework.org/schema/integration/spring-integration.xsd
 http://www.springframework.org/schema/integration/jdbc
 http://www.springframework.org/schema/integration/jdbc/spring-integration-jdbc.xsd
 http://www.springframework.org/schema/integration/jmx
 http://www.springframework.org/schema/integration/jmx/spring-integration-jmx.xsd
 http://www.springframework.org/schema/util
 http://www.springframework.org/schema/util/spring-util.xsd">
    <!--
        <util:properties id="springIntegrationProperties">
            <prop key="jmxPublishingChannelObjectName">modelmbean:name=AuditNotifications</prop>
        </util:properties>

        <bean id="throwableToStringTransformer"
              class="de.iew.framework.spring.integration.transformer.SimpleThrowableTransformer"/>

        <task:executor id="executor" pool-size="5"/>

        <int:poller id="defaultPoller" max-messages-per-poll="1" task-executor="executor" fixed-rate="100"/>

        <int:channel id="auditEventMessageOutgoingChannel"/>

        <int:recipient-list-router input-channel="auditEventMessageOutgoingChannel"
                                   ignore-send-failures="false"
                                   apply-sequence="true">
            <int:recipient channel="auditEventMessageDatabaseChannel"/>
            <int:recipient channel="auditEventMessageJmxChannel"/>
        </int:recipient-list-router>

        <int:channel id="auditEventMessageDatabaseChannel"></int:channel>

        <int:channel id="auditEventMessageDatabaseInbound">
            <int:queue capacity="1000"/>
        </int:channel>

        <int-jdbc:outbound-gateway
                update="insert into audit_event_message (id, message, principal, severity, timestamp) values (NULL, :message, :principal, :severity, :timestamp)"
                request-channel="auditEventMessageDatabaseChannel" data-source="dataSource"
                request-sql-parameter-source-factory="spelSource"
                reply-channel="auditEventMessageDatabaseInbound"
                query="SELECT LAST_INSERT_ID()"/>

        <bean id="spelSource"
              class="org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory">
            <property name="parameterExpressions">
                <map>
                    <entry key="message" value="payload.message"/>
                    <entry key="principal" value="payload.principal"/>
                    <entry key="severity" value="payload.getSeverity().name()"/>
                    <entry key="timestamp" value="new java.sql.Timestamp(payload.getTimestamp().getTime())"/>
                </map>
            </property>
        </bean>

        <int:channel id="auditEventMessageJmxChannel"/>

        <int:channel id="enrichedAuditEventMessageJmxChannel"/>

        <int:header-enricher input-channel="auditEventMessageJmxChannel" output-channel="enrichedAuditEventMessageJmxChannel">
            <int:header name="jmx_notificationType" method="notificationType" ref="jmxAuditEventMessageEnricher"/>
        </int:header-enricher>

        <bean id="jmxAuditEventMessageEnricher" class="de.iew.spring.integration.JmxAuditEventMessageHeaderEnricher"/>

        <int-jmx:notification-publishing-channel-adapter channel="enrichedAuditEventMessageJmxChannelWithId"
                object-name="#{springIntegrationProperties.jmxPublishingChannelObjectName}"/>

        <int:channel id="enrichedAuditEventMessageJmxChannelWithId"/>

        <int:transformer ref="auditEventIdEnricherBean"
                         input-channel="enrichedAuditEventMessageJmxChannel"
                         method="transform" output-channel="enrichedAuditEventMessageJmxChannelWithId"/>

        <bean id="auditEventIdEnricherBean" class="de.iew.services.audit.JmxAuditEventMessageTransformer"/>

    -->
    <!--
    Kanal zum Absenden von Spring ApplicationEvents
    -->
    <!--
    <int:channel id="applicationEventChannel">
        <int:queue/>
    </int:channel>

    <int-event:outbound-channel-adapter id="auditEventOutboundAdapter" channel="applicationEventChannel">
        <int:poller ref="defaultPoller"/>
    </int-event:outbound-channel-adapter>
    -->
    <!--
    Der eingetragene Wert für id entspricht dem Default und könnte auch weggelassen
    werden.

    resource entspricht der Nutzergruppe, der man beitreten möchte. In Openfire
    sind das die konfigurierten Gruppen.

    see http://static.springsource.org/spring-integration/reference/htmlsingle/#xmpp
    -->
    <!--
    <int-xmpp:xmpp-connection id="xmppConnection" user="@xmpp.user@" password="@xmpp.password@" host="@xmpp.host@"
                              port="@xmpp.port@"
                              resource="@xmpp.resource@" subscription-mode="@xmpp.subscription_mode@"
                              service-name="@xmpp.service_name@"/>
    -->
    <!--
    Kanal zum Absenden von XMPP-Nachrichten.

    Die Chain sieht wie folgt aus:

    \o/
      |     -> xmppOutboundEventChannel -> Transformer -> transformedXmppOutboundEventChannel -> outboundEventAdapter -> XMPP-Server
     /\
    -->
    <int:channel id="xmppOutboundEventChannel"/>
    <!--
    <int:transformer ref="throwableToStringTransformer" input-channel="xmppOutboundEventChannel"
                     method="transform" output-channel="transformedXmppOutboundEventChannel">
    </int:transformer>

    <int:channel id="transformedXmppOutboundEventChannel">
        <int:queue/>
    </int:channel>

    <int-xmpp:outbound-channel-adapter id="outboundEventAdapter"
                                       channel="transformedXmppOutboundEventChannel"
                                       xmpp-connection="xmppConnection">
        <int:poller ref="defaultPoller"/>
    </int-xmpp:outbound-channel-adapter>
-->
    <!--
    Spring Integration Konfiguration zum Empfangen von XMPP-Nachrichten.
    -->
    <!--
    <int:channel id="xmppInboundEventChannel"/>

    <int-xmpp:inbound-channel-adapter id="xmppInboundAdapter"
                                      channel="xmppInboundEventChannel"
                                      xmpp-connection="xmppConnection"
                                      extract-payload="false"
                                      auto-startup="true"/>
                                      -->
</beans>