<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2012-2013 Manuel Schulze <manuel_schulze@i-entwicklung.de>
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
  http://www.springframework.org/schema/security
  http://www.springframework.org/schema/security/spring-security-3.1.xsd">

    <import resource="classpath:security/spring-security-shared-config.xml"/>
    <import resource="classpath:security/spring-security-json.xml"/>
    <import resource="classpath:security/spring-security-web.xml"/>

    <!--
    Damit wir auch SpEL in JSPs verwenden können.
    -->
    <bean id="webexpressionHandler"
          class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/>

    <!--
    Definiere unsere Security-Filter-Chain. Sie wird unter der Id
    springSecurityFilterChain konfiguriert. Das ist Springs default Id und
    muss auch in der web.xml als Filter-Konfiguration angegeben werden. Man
    kann auch eine eigene Id verwenden.

    Der Link in die Spring-Dokumentation zeigt interessante Anwendungsfälle.

    see http://static.springsource.org/spring-security/site/docs/3.0.x/reference/security-filter-chain.html

    Laut XML-Beschreibung ist none ein gültiger Wert für filters. Scheinbar
    weiß IntelliJ das nicht.
    -->
    <bean id="springSecurityFilterChain" class="org.springframework.security.web.FilterChainProxy">
        <security:filter-chain-map request-matcher="ant">
            <security:filter-chain pattern="/**/*.json" filters="
            securityContextPersistenceFilterWithASCTrue,
            concurrentSessionFilter,
            securityContextHolderAwareRequestFilter,
            anonymousAuthFilter,
            jsonSessionManagementFilter,
            http403ExceptionTranslationFilter,
            filterSecurityInterceptor"
                    />
            <security:filter-chain pattern="/**" filters="
            securityContextPersistenceFilterWithASCTrue,
            concurrentSessionFilter,
            logoutFilter,
            formAuthenticationFilter,
            securityContextHolderAwareRequestFilter,
            anonymousAuthFilter,
            webSessionManagementFilter,
            formLoginExceptionTranslationFilter,
            filterSecurityInterceptor,
            webResourceRequestSaveFilter"
                    />
        </security:filter-chain-map>
    </bean>

    <!--
    Der globale Spring AuthenticationManager.

    Das Alias ist wichtig. Sonst ist der AuthenticationManager in Spring nicht
    eindeutig definiert und Spring startet nicht ordnungsgemäß. Scheinbar
    scheinen mehrere Beans unter der id "authenticationManager" konfiguriert zu
    sein.
    -->
    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider user-service-ref="userDetailsService">
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!--
    Wir verwenden für den Anfang MD5. Später stellen wir dann auf stärkeres
    Hashing, Salzen und Mehrfachiterationen um.

    see http://www.heise.de/security/artikel/Passwoerter-unknackbar-speichern-1253931.html

    TODO: Auf stärkeres Hashing und Salz umstellen. PHP-Code portieren oder Spring Recherche
    -->
    <bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>

</beans>